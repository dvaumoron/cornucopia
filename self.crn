
commonNames = [
    "Any", "Append", "Bool", "Byte", "Cap", "Chan", "Comment", "Comparable", "Complex", "Complex64", "Complex128", "Err", "Error",
    "Func", "Float32", "Float64", "Id", "Int", "Int8", "Int16", "Int32", "Int64","Imag", "Index", "Interface", "Iota", "Len",
    "Lit", "LitByte", "LitRune", "Make", "Map", "Nil", "Op", "Parens", "Qual", "Real", "Recover", "Rune", "String",
    "Uint","Uint8", "Uint16", "Uint32", "Uint64", "Uintptr", "Values",
]

globalNames = [
    "NewFile",  "Break", "Case", "Close", "Continue", "Copy", "Default", "Defer", "Delete", "Empty", "Fallthrough", "For", "Go",
    "Goto", "If", "Line", "List", "Null", "Return", "Select", "Switch", "Union", "Var",
]

jenFileMethodNames = [
    "HeaderComment", "PackageComment", "Anon", "ImportAlias", "ImportName","ImportNames", "Comment",
    "Const", "Var", "Type", "Func", "Line", "Save",
]

jenStatementMethodNames = [
    "Add", "Assert", "Block", "Call", "Clone", "Defs", "Dot", "Else", "Params", "Range", "Struct", "Tag", "Types",
]

basicFunctions = [
    "Any", "Bool", "Break", "Byte", "Chan", "Comparable", "Complex64", "Complex128", "Continue", "Default", "Defer", "Empty", "Err",
    "Error", "Fallthrough", "Float32", "Float64", "Func", "Go", "Goto", "Int", "Int8", "Int16", "Int32", "Int64", "Iota", "Line",
    "Nil", "Null", "Recover", "Rune", "Select", "String", "Uint", "Uint8", "Uint16", "Uint32", "Uint64", "Uintptr", "Var",
]

basicFileMethods = ["Const", "Var", "Type", "Func"]

basicStatementMethods = [
    "Any", "Bool", "Byte", "Chan", "Clone", "Comparable", "Complex64", "Complex128", "Else", "Err", "Error", "Float32", "Float64",
    "Func", "Iota", "Int", "Int8", "Int16", "Int32", "Int64", "Nil", "Range", "Recover", "Rune", "String",
    "Uint", "Uint8", "Uint16", "Uint32", "Uint64", "Uintptr"
]

JEN = "github.com/dave/jennifer/jen"
STARLARK = "go.starlark.net/starlark"

def newFileWithComment():
    f = NewFile("main")
    f.HeaderComment("This file is generated - do not edit.")
    return f

def wrapFunc(name, functionName):
    return Qual(STARLARK, "NewBuiltin").Call(name, Id(functionName))

def addGlobals(name):
    return Qual(STARLARK, "Universe").Index(name).Op("=").Add(wrapFunc(name, "wrapped" + name))

def newStarlarkBuiltinFunc(f, name, param, param2, param3, param4):
    return f.Func().Id(name).Params(
        Id(param).Op("*").Qual(STARLARK, "Thread"),
        Id(param2).Op("*").Qual(STARLARK, "Builtin"),
        Id(param3).Qual(STARLARK, "Tuple"),
        Id(param4).Index().Qual(STARLARK, "Tuple"),
    ).Parens(List(Qual(STARLARK, "Value"), Error()))

def returnWrappedStatement(value):
    return Return(Id("wrapper").Types(Op("*").Qual(JEN, "Statement")).Values({
            Id("inner"): value,
            Id("wType"): Op("&").Id("jenStatementWrappedType"),
    }), Nil())

def basicFunction(f, functionName):
    newStarlarkBuiltinFunc(f, "wrapped" + functionName, "_", "_", "_", "_").Block(
        returnWrappedStatement(Qual(JEN, functionName).Call()),
    )
    f.Line()

def basicMethod(f, typeName, methodName):
    newStarlarkBuiltinFunc(f,"jen" + typeName +"_" + methodName, "_", "b", "_", "_").Block(
        Id("recv").Op(":=").Id("b").Dot("Receiver").Call().Assert(Id("wrapper").Types(Op("*").Qual(JEN, typeName))),
        Id("stmt").Op(":=").Id("recv").Dot("inner").Dot(methodName).Call(),
        returnWrappedStatement(Id("stmt")),
    )
    f.Line()

def registerType(name, methodNames):
    return Id(name+"WrappedType").Op("=").Id("makeWrappedType").Call(name, *[wrapFunc(methodName, name + "_" + methodName) for methodName in methodNames])

def makeLinking():
    linking = newFileWithComment()

    linking.Func().Id("init").Params().Block(
        registerType("jenFile", jenFileMethodNames),
        registerType("jenStatement", sorted(jenStatementMethodNames + commonNames)),
    )   

    linking.Line()

    linking.Func().Id("initCornucopiaGlobals").Params().Block(*[addGlobals(name) for name in sorted(globalNames + commonNames)])

    linking.Save("linking.go")

def makeWraping():
    wrapping = newFileWithComment()

    for f in basicFunctions:
        basicFunction(wrapping, f)

    for m in basicFileMethods:
        basicMethod(wrapping, "File", m)

    for m in basicStatementMethods:
        basicMethod(wrapping, "Statement", m)

    wrapping.Save("wrapping.go")

makeLinking()
makeWraping()
