
commonNames = [
    "Any", "Append", "Bool", "Byte", "Cap", "Chan", "Comment", "Comparable", "Complex", "Complex64", "Complex128", "Err", "Error",
    "Func", "Float32", "Float64", "Id", "Int", "Int8", "Int16", "Int32", "Int64","Imag", "Index", "Interface", "Iota", "Len",
    "Line", "Lit", "LitByte", "LitRune", "Make", "Map", "Nil", "Op", "Parens", "Qual", "Real", "Recover", "Rune", "String",
    "Uint","Uint8", "Uint16", "Uint32", "Uint64", "Uintptr", "Values",
]

globalNames = [
    "NewFile",  "Break", "Case", "Close", "Continue", "Copy", "Default", "Defer", "Delete", "Empty", "Fallthrough", "For", "Go",
    "Goto", "If", "List", "Null", "Return", "Select", "Switch", "Union", "Var",
]

jenStatementMethodNames = [
    "Add", "Assert", "Block", "Call", "Clone", "Defs", "Dot", "Else", "Params", "Range", "Struct", "Tag", "Types",
]

JEN = "github.com/dave/jennifer/jen"
STARLARK = "go.starlark.net/starlark"

def newFileWithComment():
    f = NewFile("main")
    f.HeaderComment("This file is generated - do not edit.")
    return f

def addGlobals(name):
    return Qual(STARLARK, "Universe").Index(name).Op("=").Qual(STARLARK, "NewBuiltin").Call(name, Id("wrapped" + name))

def basicMethod(f, typeName, methodName):
    f.Func().Id("jen" + typeName +"_" + methodName).Params(
        Id("_").Op("*").Qual(STARLARK, "Thread"),
        Id("b").Op("*").Qual(STARLARK, "Builtin"),
        Id("_").Qual(STARLARK, "Tuple"),
        Id("_").Index().Qual(STARLARK, "Tuple"),
    ).Parens(List(Qual(STARLARK, "Value"), Error())).Block(
        Id("recv").Op(":=").Id("b").Dot("Receiver").Call().Assert(Id("wrapper").Types(Op("*").Qual(JEN, typeName))),
        Id("stmt").Op(":=").Id("recv").Dot("inner").Dot(methodName).Call(),
        Return(Id("wrapper").Types(Op("*").Qual(JEN, "Statement")).Values({
            Id("inner"): Id("stmt"),
            Id("wType"): Op("&").Id("jenStatementWrappedType"),
        }), Nil())
    )
    f.Line()

def newMethod(typeName, name):
    return Qual(STARLARK, "NewBuiltin").Call(name, Id(typeName + "_" + name))

def registerType(name, methodNames):
    return Id(name+"WrappedType").Op("=").Id("makeWrappedType").Call(name, *[newMethod(name, methodName) for methodName in methodNames])

linking = newFileWithComment()

linking.Func().Id("init").Params().Block(
    registerType("jenFile", [
        "HeaderComment", "PackageComment",
        "Anon", "ImportAlias", "ImportName","ImportNames",
        "Comment", "Const", "Var", "Type", "Func", 
        "Line", "Save",
    ]),
    Line(),
    registerType("jenStatement", sorted(jenStatementMethodNames + commonNames)),
)

linking.Line()

linking.Func().Id("initCornucopiaGlobals").Params().Block(*[addGlobals(name) for name in sorted(globalNames + commonNames)])

linking.Save("linking.go")

wrapping = newFileWithComment()

basicMethod(wrapping, "File", "Const")
basicMethod(wrapping, "File", "Var")
basicMethod(wrapping, "File", "Type")
basicMethod(wrapping, "File", "Func")

basicMethod(wrapping, "Statement", "Any")
basicMethod(wrapping, "Statement", "Bool")
basicMethod(wrapping, "Statement", "Byte")
basicMethod(wrapping, "Statement", "Chan")
basicMethod(wrapping, "Statement", "Clone")
basicMethod(wrapping, "Statement", "Comparable")
basicMethod(wrapping, "Statement", "Complex64")
basicMethod(wrapping, "Statement", "Complex128")
basicMethod(wrapping, "Statement", "Else")
basicMethod(wrapping, "Statement", "Err")
basicMethod(wrapping, "Statement", "Error")
basicMethod(wrapping, "Statement", "Float32")
basicMethod(wrapping, "Statement", "Float64")

basicMethod(wrapping, "Statement", "Line")

wrapping.Save("wrapping.go")
