
# linking declaration  part (register wrapping function into starlark)

commonNames = [
    "Any", "Append", "Bool", "Byte", "Cap", "Chan", "Comment", "Comparable", "Complex", "Complex64", "Complex128", "Err", "Error",
    "Func", "Float32", "Float64", "Id", "Int", "Int8", "Int16", "Int32", "Int64","Imag", "Index", "Interface", "Iota", "Len",
    "Lit", "LitByte", "LitRune", "Make", "Map", "Nil", "Op", "Parens", "Qual", "Real", "Recover", "Rune", "String",
    "Uint","Uint8", "Uint16", "Uint32", "Uint64", "Uintptr", "Values",
]

globalNames = [
    "NewFile",  "Break", "Case", "Close", "Continue", "Copy", "Default", "Defer", "Delete", "Empty", "Fallthrough", "For", "Go",
    "Goto", "If", "Line", "List", "Null", "Return", "Select", "Switch", "Union", "Var",
]

jenFileMethodNames = [
    "HeaderComment", "PackageComment", "Anon", "ImportAlias", "ImportName","ImportNames", "Comment",
    "Const", "Var", "Type", "Func", "Line", "Save",
]

jenStatementMethodNames = [
    "Add", "Assert", "Block", "Call", "Clone", "Defs", "Dot", "Else", "Params", "Range", "Struct", "Tag", "Types",
]

# wrapping declaration part (generate go function fitting starlark interface)

commonBasic = [
    "Any", "Bool", "Byte", "Chan", "Comparable", "Complex64", "Complex128", "Err", "Error", "Float32", "Float64",
    "Func", "Int", "Int8", "Int16", "Int32", "Int64", "Iota", "Nil", "Recover", "Rune", "String",
    "Uint", "Uint8", "Uint16", "Uint32", "Uint64", "Uintptr", 
]

basicFunctions = ["Break", "Continue", "Default", "Defer", "Empty", "Fallthrough", "Go", "Goto", "Line", "Null", "Select", "Var"]

commonVarargs = ["Append", "Index", "Interface", "Make"]

varargsFunctions = ["Case", "For", "If", "List", "Return", "Switch", "Union"]

commonOneargs = ["Cap", "Imag", "Len", "Map", "Parens", "Real"]

oneargFunctions = ["Close"]

basicFileMethods = ["Const", "Var", "Type", "Func"]

basicStatementMethods = ["Clone", "Else", "Range"]

varargsStatementMethods = ["Add", "Block", "Call", "Defs", "Params", "Struct", "Types"]

oneargStatementMethods = ["Assert"]

# generation part

GLU = "github.com/dvaumoron/cornucopia/glu"
JEN = "github.com/dave/jennifer/jen"
STARLARK = "go.starlark.net/starlark"

def newFileWithComment():
    f = NewFile("go_glu")
    f.HeaderComment("This file is generated - do not edit.")
    return f

def wrapFunc(name, functionName):
    return Qual(STARLARK, "NewBuiltin").Call(name, Id(functionName))

def declareGlobal(name):
    return Qual(STARLARK, "Universe").Index(name).Op("=").Add(wrapFunc(name, "wrapped" + name))

def newStarlarkBuiltinFunc(f, name, param, param2, param3, param4):
    return f.Func().Id(name).Params(
        Id(param).Op("*").Qual(STARLARK, "Thread"),
        Id(param2).Op("*").Qual(STARLARK, "Builtin"),
        Id(param3).Qual(STARLARK, "Tuple"),
        Id(param4).Index().Qual(STARLARK, "Tuple"),
    ).Parens(List(Qual(STARLARK, "Value"), Error()))

def returnWrappedStatement(value):
    return Return(Qual(GLU, "Wrapper").Values({
            Id("Inner"): value,
            Id("WType"): Op("&").Id("jenStatementWrappedType"),
    }), Nil())

def basicFunction(f, functionName):
    newStarlarkBuiltinFunc(f, "wrapped" + functionName, "_", "_", "_", "_").Block(
        returnWrappedStatement(Qual(JEN, functionName).Call()),
    )
    f.Line()

CONVERT_ARGS_TO_CODE_SLICE = Id("convertToCodeSlice").Call(Id("args")).Op("...")

def varargsFunction(f, functionName):
    newStarlarkBuiltinFunc(f, "wrapped" + functionName, "_", "_", "args", "_").Block(
        returnWrappedStatement(Qual(JEN, functionName).Call(CONVERT_ARGS_TO_CODE_SLICE)),
    )
    f.Line()

DECLARE_VALUE = Var().Id("value").Qual(STARLARK, "Value")
CALL_UNPACK = If(
    Err().Op(":=").Qual(STARLARK, "UnpackArgs").Call(Id("b").Dot("Name").Call(), Id("args"), Id("kwargs"), "value", Op("&").Id("value")),
    Err().Op("!=").Nil(),
).Block(
    Return(Nil(), Err()),
)
CONVERT_VALUE_TO_CODE = Id("convertToCode").Call(Id("value"))
DECLARE_RECEIVER = List(Id("recv"), Id("_")).Op(":=").Id("b").Dot("Receiver").Call().Assert(Qual(GLU, "Wrapper"))
TEST_CAST = If(Op("!").Id("ok")).Block(
    Return(Nil(), Qual(GLU, "ErrCast")),
)


def oneargFunction(f, functionName):
    newStarlarkBuiltinFunc(f, "wrapped" + functionName, "_", "b", "args", "kwargs").Block(
        DECLARE_VALUE, CALL_UNPACK,
        returnWrappedStatement(Qual(JEN, functionName).Call(CONVERT_VALUE_TO_CODE)),
    )
    f.Line()


def assertReceiver(typeName):
    return [
        DECLARE_RECEIVER,
        List(Id("casted"), Id("ok")).Op(":=").Id("recv").Dot("Inner").Assert(Op("*").Qual(JEN, typeName)),
        TEST_CAST,
        Line(),
    ]

def declareRes(methodName):
    return Id("res").Op(":=").Id("casted").Dot(methodName)

def basicMethod(f, typeName, methodName):
    instructions = assertReceiver(typeName)
    instructions.append(declareRes(methodName).Call())
    instructions.append(returnWrappedStatement(Id("res")))

    newStarlarkBuiltinFunc(f,"jen" + typeName +"_" + methodName, "_", "b", "_", "_").Block(*instructions)
    f.Line()

def varargsMethod(f, typeName, methodName):
    instructions = assertReceiver(typeName)
    instructions.append(declareRes(methodName).Call(CONVERT_ARGS_TO_CODE_SLICE))
    instructions.append(returnWrappedStatement(Id("res")))

    newStarlarkBuiltinFunc(f,"jen" + typeName +"_" + methodName, "_", "b", "args", "_").Block(*instructions)
    f.Line()

def oneargMethod(f, typeName, methodName):
    instructions = [DECLARE_VALUE, CALL_UNPACK, Line()]
    instructions.extend(assertReceiver(typeName))
    instructions.append(declareRes(methodName).Call(CONVERT_VALUE_TO_CODE))
    instructions.append(returnWrappedStatement(Id("res")))

    newStarlarkBuiltinFunc(f,"jen" + typeName +"_" + methodName, "_", "b", "args", "kwargs").Block(*instructions)
    f.Line()

def registerType(name, methodNames):
    return Id(name+"WrappedType").Op("=").Qual(GLU, "MakeWrappedType").Call(name, *[wrapFunc(methodName, name + "_" + methodName) for methodName in methodNames])

def makeLinking():
    linking = newFileWithComment()

    linking.Func().Id("init").Params().Block(
        registerType("jenFile", jenFileMethodNames),
        registerType("jenStatement", sorted(jenStatementMethodNames + commonNames)),
    )   

    linking.Line()

    linking.Func().Id("InitCornucopiaGoGlobals").Params().Block(*[declareGlobal(name) for name in sorted(globalNames + commonNames)])

    linking.Save("linking.go")

def makeWraping():
    wrapping = newFileWithComment()

    for f in sorted(basicFunctions + commonBasic):
        basicFunction(wrapping, f)

    for f in sorted(varargsFunctions + commonVarargs):
        varargsFunction(wrapping, f)

    for f in sorted(oneargFunctions + commonOneargs):
        oneargFunction(wrapping, f)

    for m in basicFileMethods:
        basicMethod(wrapping, "File", m)

    for m in sorted(basicStatementMethods + commonBasic):
        basicMethod(wrapping, "Statement", m)

    for m in sorted(varargsStatementMethods + commonVarargs):
        varargsMethod(wrapping, "Statement", m)

    for m in sorted(oneargStatementMethods + commonOneargs):
        oneargMethod(wrapping, "Statement", m)

    wrapping.Save("wrapping.go")

makeLinking()
makeWraping()
