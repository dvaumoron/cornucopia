#
# Copyright 2023 cornucopia authors.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

load("hello.crn", "Hello")

Hello()

load("dvaumoron/sql.crn", "ExecerContext", "RowQueryerContext", "QueryerContext", "CRUD", "BuildConvTypeDesc", "SelectQuery", "MultiConvertedResultQueryFunc", "ForeignKeyMethod")

def newModelFile():
    f = NewFile("model")
    f.HeaderComment("Generated from ../test.crn - do not edit.")
    return f

commonFile = newModelFile()

commonFile.Const().Id("timeout").Op("=").Qual("time", "Duration").Call(5).Op("*").Qual("time", "Second")

# interfaces allowing *sql.DB or *sql.Tx

ExecerContext(commonFile, "ExecerContext")

commonFile.Line()

RowQueryerContext(commonFile, "RowQueryerContext")

commonFile.Line()

QueryerContext(commonFile, "QueryerContext")

commonFile.Save("model/common.go")

execerContext = Id("ExecerContext")
rowQueryerContext = Id("RowQueryerContext")
queryerContext = Id("QueryerContext")

timeOutDuration = Id("timeout")

userFile = newModelFile()

userType, userBuilder = CRUD(
    userFile, BuildConvTypeDesc("User", {
        "Login": String(),
        "Firstname": String(),
        "Lastname": String(),
        "Email": String(),
    }),
    timeOutDuration=timeOutDuration,
    execerContext=execerContext, rowQueryerContext=rowQueryerContext,
)

userFile.Line()

messageFields =  {
    "Id": Int64(),
    "UserLogin": String(),
    "Content": String(),
}

messageDesc = BuildConvTypeDesc("Message", messageFields)

messageFile = newModelFile()

messageType, messageBuilder = CRUD(
    messageFile, messageDesc,
    timeOutDuration=timeOutDuration,
    execerContext=execerContext,
    rowQueryerContext=rowQueryerContext,
)

messageFile.Line()

queryMessagesName = "getMessagesByUserLogin"

MultiConvertedResultQueryFunc(
    messageFile, queryMessagesName,
    query=SelectQuery(messageDesc, "m.user_login = :login;", alias="m"),
    timeOutDuration=timeOutDuration, poolType=queryerContext, inputFields={"login": String()},
    queryResultFields=messageFields, converter=Id(messageBuilder), outputType=messageType,
)

messageFile.Line()

ForeignKeyMethod(
    userFile, userType,
    methodName="GetMessages",
    functionName=queryMessagesName, foreignKey="Login",
    outputType=messageType, queryerContext=queryerContext,
)

ForeignKeyMethod(
    messageFile, messageType,
    methodName="GetUser", multi=False,
    functionName="ReadUser", foreignKey="UserLogin",
    outputType=userType, queryerContext=rowQueryerContext,
)

userFile.Save("model/user.go")
messageFile.Save("model/message.go")
