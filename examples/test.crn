#
# Copyright 2023 cornucopia authors.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

load("hello.crn", "Hello")

Hello()

load("dvaumoron/sql.crn", "ConstDurationSec", "DeclareDBInterfaces", "CRUD", "BuildConvTypeDesc", "AUTO_KEY", "SelectQueryFunc", "ForeignKeyMethod")

def newModelFile():
    f = NewFile("model")
    f.HeaderComment("Generated from ../test.crn - do not edit.")
    return f

commonFile = newModelFile()

timeOutDuration = ConstDurationSec(commonFile, "timeout", 5)

# interfaces allowing *sql.DB or *sql.Tx
dbInterfaces = DeclareDBInterfaces(commonFile, "ExecerContext", "QueryerContext", "RowQueryerContext")

commonFile.Save("model/common.go")

userFile = newModelFile()

userDesc = BuildConvTypeDesc("User", {
    "Login": String(),
    "Firstname": String(),
    "Lastname": String(),
    "Email": String(),
})

userDesc[AUTO_KEY] = False

userType, userBuilder = CRUD(
    userFile, userDesc,
    timeOutDuration=timeOutDuration, dbInterfaces=dbInterfaces,
)

userFile.Line()

messageDesc = BuildConvTypeDesc("Message", {
    "Id": Int64(),
    "UserLogin": String(),
    "Content": String(),
})

messageFile = newModelFile()

messageType, messageBuilder = CRUD(
    messageFile, messageDesc,
    timeOutDuration=timeOutDuration,
    dbInterfaces=dbInterfaces,
)

messageFile.Line()

queryMessagesName = "getMessagesByUserLogin"

SelectQueryFunc(
    messageFile, queryMessagesName,
    typeDesc=messageDesc, where="m.user_login = :login", selectAlias="m",
    timeOutDuration=timeOutDuration, dbInterfaces=dbInterfaces, inputFields={"login": String()},
)

messageFile.Line()

ForeignKeyMethod(
    userFile, userType,
    methodName="GetMessages",
    functionName=queryMessagesName, foreignKey="Login",
    outputType=messageType, dbInterfaces=dbInterfaces,
)

ForeignKeyMethod(
    messageFile, messageType,
    methodName="GetUser", multi=False,
    functionName="ReadUser", foreignKey="UserLogin",
    outputType=userType, dbInterfaces=dbInterfaces,
)

userFile.Save("model/user.go")
messageFile.Save("model/message.go")

marshalObject = {
    "Title": "todo-list",
    "User": "Me",
    "Version": 1,
    "todos": ["task1", "task2", "task3"],
}

SaveJsonFile("test.json", marshalObject)
SaveYamlFile("test.yaml", marshalObject)

buildFile = NewTextFile()
buildFile.Line("#!/usr/bin/env bash")
buildFile.Line()
buildFile.Line("git describe --tags --abbrev=", 0, " > version.txt")
buildFile.Line("go install")
buildFile.Line("rm version.txt")
buildFile.Save("build.sh")

load("dvaumoron/xml.crn", "CreateTag", "SaveFile", "XmlTag")

data = CreateTag("data")

SaveFile("test.xml", XmlTag("datas", {},
    data({"id": "1"},
        XmlTag("value", {}, ["du blabla"])
    ),
    data({"id": "2"})
))
