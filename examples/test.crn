
load("hello.crn", "Hello")

Hello()

load("dvaumoron/sql.crn", "ExecerContext", "RowQueryerContext", "QueryerContext", "CRUD", "MultiConvertedResultQueryFunc", "ForeignKeyMethod")

f = NewFile("model")
f.HeaderComment("Generated from ../test.crn - do not edit.")

f.Const().Id("timeout").Op("=").Qual("time", "Duration").Call(5).Op("*").Qual("time", "Second")

# interfaces allowing *sql.DB or *sql.Tx

ExecerContext(f, "ExecerContext")

f.Line()

RowQueryerContext(f, "RowQueryerContext")

f.Line()

QueryerContext(f, "QueryerContext")

f.Line()

execerContext=Id("ExecerContext")
rowQueryerContext = Id("RowQueryerContext")
queryerContext = Id("QueryerContext")

userType, userBuilder = CRUD(
    f, "User", primaryKey="Login", fields={
        "Login": String(),
        "Firstname": String(),
        "Lastname": String(),
        "Email": String(),
    },
    timeOutDuration = Id("timeout"),
    execerContext=execerContext, rowQueryerContext=rowQueryerContext
)

messageFields={
    "Id": Int64(),
    "UserLogin": String(),
    "Content": String(),
}

messageType, messageBuilder = CRUD(
    f, "Message", primaryKey="Id", fields=messageFields,
    timeOutDuration=Id("timeout"),
    execerContext=execerContext, rowQueryerContext=Id("RowQueryerContext")
)

f.Line()

queryMessagesName = "getMessagesByUserLogin"

MultiConvertedResultQueryFunc(
    f, queryMessagesName,
    query="select o.id, o.userLogin, o.content from messages as o where o.userLogin = :login;",
    timeOutDuration=Id("timeout"), poolType=queryerContext, inputTypes={"login": String()}, queryResultType=messageFields,
    converter=Id(messageBuilder), outputType=messageType,
)

f.Line()

ForeignKeyMethod(
    f, userType,
    methodName="GetMessages",
    functionName=queryMessagesName, foreignKey="Login",
    outputType=messageType, queryerContext=queryerContext,
)

f.Save("model/model.go")